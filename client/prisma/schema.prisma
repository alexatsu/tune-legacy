generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String    @id @default(cuid())
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  name          String?
  settingsId    String?   @unique
  accounts      Account[]
  Albums        Album[]   @relation("userAlbums")
  sessions      Session[]
  Songs         Song[]    @relation("userSongs")
  settings      Settings? @relation("userSettings", fields: [settingsId], references: [id])
}

model Song {
  id       String   @id @default(cuid())
  title    String
  duration String
  url      String
  urlId    String
  addedAt  DateTime
  userId   String
  cover    String?
  User     User     @relation("userSongs", fields: [userId], references: [id])
}

model Album {
  id          String      @id @default(cuid())
  title       String
  description String
  cover       String?
  gradient    String
  userId      String
  User        User        @relation("userAlbums", fields: [userId], references: [id])
  albumSongs  AlbumSong[] @relation("albumSong")
}

model AlbumSong {
  albumId  String
  cover    String?
  duration String
  title    String
  url      String
  urlId    String
  id       String  @id @default(cuid())
  Album    Album   @relation("albumSong", fields: [albumId], references: [id])
}

model Settings {
  id               String         @id @default(cuid())
  themesSettingsId String         @unique
  userId           String?
  themesSettings   ThemesSettings @relation("themesSettings", fields: [themesSettingsId], references: [id])
  user             User?          @relation("userSettings")
}

model ThemesSettings {
  id                String              @id @default(cuid())
  currentThemeId    String              @unique
  customThemes      CustomThemes[]      @relation("customThemes")
  quickAccessThemes QuickAccessThemes[] @relation("quickAccessThemes")
  settings          Settings?           @relation("themesSettings")
  currentTheme      CurrentTheme        @relation("currentTheme", fields: [currentThemeId], references: [id])
}

model CurrentTheme {
  id             String          @id @default(cuid())
  background     String
  widgets        String
  accent         String
  text           String
  themesSettings ThemesSettings? @relation("currentTheme")
}

model QuickAccessThemes {
  id               String          @id @default(cuid())
  background       String
  widgets          String
  accent           String
  text             String
  themesSettingsId String?
  themesSettings   ThemesSettings? @relation("quickAccessThemes", fields: [themesSettingsId], references: [id])
}

model CustomThemes {
  id               String          @id @default(cuid())
  background       String
  widgets          String
  accent           String
  text             String
  themesSettingsId String?
  themesSettings   ThemesSettings? @relation("customThemes", fields: [themesSettingsId], references: [id])
}
